

package Mernis;
//------------------------------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 9.0.1.0
//
// Created by Quasar Development 
//
// This class has been generated for test purposes only and cannot be used in any commercial project.
// To use it in commercial project, you need to generate this class again with Premium account.
// Check https://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account.
//
// Licence: F6DE6F68E7C2E9D469FD6E42E47BEE156C89DDB15949D72EAE7B3CE29072B54F8D795DCA91EF4B633C7A3C5B1472C7002BC560A3F2A00E698EBD7262800355C1
//------------------------------------------------------------------------
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.util.*;
import java.io.InputStream;

enum NAUSoapVersion {
    v1_0,
    v1_1,
    v1_2
}

interface NAUISerializableObject
{
    void loadWithXml(org.w3c.dom.Element __node, NAURequestResultHandler __handler);
    void serialize(org.w3c.dom.Element __node,NAURequestResultHandler __handler);
}

interface NAUIReferenceObject
{
}

public class NAURequestResultHandler
{
    private NAUSoapVersion _version=NAUSoapVersion.v1_1;
    
    public NAUSoapVersion getVersion(){
        return _version;
    }
    private String soapNS = "";
    private HashMap<Object, String> reverseReferencesTable =new HashMap<Object, String>();
    private HashMap<String, Object> referencesTable = new HashMap<String, Object>();
    private org.w3c.dom.Element body=null;
    private org.w3c.dom.Element header=null;

    private org.w3c.dom.Element outputBody=null;
    private org.w3c.dom.Element outputHeader=null;
    
    private HashMap<String, String> namespaces = new HashMap<String, String>();

    private static NAUDateTimeParser dateTimeConverter=new NAUStandardDateTimeParser();
    private static HashMap< java.lang.String,java.lang.Class> classNames = new HashMap< java.lang.String, java.lang.Class>();
    private static HashMap< java.lang.Class,java.lang.String> reverseClassNames = new HashMap< java.lang.Class, java.lang.String>();
    private static HashMap< java.lang.String,java.lang.String> elementNames = new HashMap< java.lang.String, java.lang.String>();

    public NAURequestResultHandler(NAUSoapVersion version)
    {
        _version=version;
    }



    public String getSoapNamespace()
    {
        return soapNS;
    }

    public org.w3c.dom.Element getBody() {
        return body;
    }

    public void setBody(org.w3c.dom.Element body) {
        this.body = body;
    }

    public org.w3c.dom.Element getHeader() {
        return header;
    }

    public void setHeader(org.w3c.dom.Element header) {
        this.header = header;
    }

    public org.w3c.dom.Element getOutputBody() {
        return outputBody;
    }

    public void setOutputBody(org.w3c.dom.Element outputBody) {
        this.outputBody = outputBody;
    }

    public org.w3c.dom.Element getOutputHeader() {
        return outputHeader;
    }

    public void setOutputHeader(org.w3c.dom.Element outputHeader) {
        this.outputHeader = outputHeader;
    }

    public static void setDateTimeParser(NAUDateTimeParser converter)
    {
        if(converter==null)
        {
            converter = new NAUStandardDateTimeParser();
        }
        dateTimeConverter=converter;
    }

    public static NAUDateTimeParser getDateTimeParser()
    {
        return dateTimeConverter;
    }

    public org.w3c.dom.Attr addAttribute(org.w3c.dom.Element element, String namespace,String name, String value)
    {
        String prefix=ensureNamespace(namespace,element.getOwnerDocument(),null);
        String attrName=name;
        if(!NAUHelper.isEmpty(prefix))
        {
            attrName=prefix+":"+name;
        }
        org.w3c.dom.Attr attr=element.getOwnerDocument().createAttributeNS(namespace,attrName);
        attr.setValue(value);
        element.setAttributeNodeNS(attr);
        return attr;
    }

    public org.w3c.dom.Document createEnvelopeXml() throws ParserConfigurationException
    {
        soapNS = _version == NAUSoapVersion.v1_2 ? "http://www.w3.org/2003/05/soap-envelope" : "http://schemas.xmlsoap.org/soap/envelope/";
        DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
        builderFactory.setNamespaceAware(true);
        DocumentBuilder docBuilder = builderFactory.newDocumentBuilder();
        org.w3c.dom.Document xml =docBuilder.newDocument();
       
        org.w3c.dom.Element envelope=xml.createElementNS(soapNS,"soap:Envelope");
        header=xml.createElementNS(soapNS,"soap:Header");
        body =xml.createElementNS(soapNS,"soap:Body");
        xml.appendChild(envelope);
        envelope.appendChild(header);
        envelope.appendChild(body);

        ensureNamespace(soapNS,xml,"soap");
        ensureNamespace(NAUHelper.MS_SERIALIZATION_NS,xml,"ms");
        ensureNamespace(NAUHelper.XSI,xml,"xsi");
        return xml;
    }
    
    protected void finishEnvelopeXml(org.w3c.dom.Document doc) {
            
    }

    public void addWSAddressingHeaders(String action, String replyTo,String to,List< String>  referenceParameters)
    {
        org.w3c.dom.Document xml=header.getOwnerDocument();
        org.w3c.dom.Element wsaddressingElement=writeElement("http://www.w3.org/2005/08/addressing","Action",xml );
        header.appendChild(wsaddressingElement);
        wsaddressingElement.setTextContent(action);
        addAttribute(wsaddressingElement,soapNS,"mustUnderstand",  "1");
        wsaddressingElement=writeElement( "http://www.w3.org/2005/08/addressing","MessageID",xml);
        header.appendChild(wsaddressingElement);
        wsaddressingElement.setTextContent("urn:uuid:" + UUID.randomUUID());
        wsaddressingElement=writeElement( "http://www.w3.org/2005/08/addressing","ReplyTo", xml);

        header.appendChild(wsaddressingElement);
        org.w3c.dom.Element innerWsaddressingElement=writeElement("http://www.w3.org/2005/08/addressing","Address", xml);
        innerWsaddressingElement.setTextContent(replyTo);
        wsaddressingElement.appendChild(innerWsaddressingElement);

        wsaddressingElement=writeElement( "http://www.w3.org/2005/08/addressing","To", xml);
        header.appendChild(wsaddressingElement);
        wsaddressingElement.setTextContent(to);
        addAttribute( wsaddressingElement,soapNS,"mustUnderstand",  "1");
        
        for (String param : referenceParameters) 
        {
            try {
                org.w3c.dom.Document root = NAUHelper.loadXMLFromString(param);
                org.w3c.dom.Element element=(org.w3c.dom.Element)header.getOwnerDocument().adoptNode(root.getDocumentElement());
                header.appendChild(element);
                addAttribute(element, "http://www.w3.org/2005/08/addressing","IsReferenceParameter",  "true");
            } catch (java.lang.Exception e) {
                e.printStackTrace();
            }            
        }
    }
    
    public void setAnyTypeValue(Object item, org.w3c.dom.Element propertyElement)
    {
        if (item instanceof NAUISerializableObject)
        {
            NAUISerializableObject obj=(NAUISerializableObject)item;
            obj.serialize(propertyElement ,this);
            return;
        }
        String prefix=ensureNamespace( "http://www.w3.org/2001/XMLSchema",propertyElement.getOwnerDocument(),null);
        if(item instanceof String)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":string");
        }
        else if(item instanceof Boolean)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":boolean");
        }
        else if (item instanceof Integer)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":int");
        }
        else if (item instanceof Double)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":double");
        }
        else if (item instanceof Float)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":float");
        }
        else if (item instanceof Long)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":long");
        }
        else if (item instanceof Short)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":short");
        }
        else if (item instanceof java.math.BigDecimal)
        {
            addAttribute(propertyElement,"http://www.w3.org/2001/XMLSchema-instance","type",  prefix+":decimal");
        }
        propertyElement.setTextContent(item.toString());
    }

    public Object getAnyTypeValue(org.w3c.dom.Element node)
    {
        String typeAttr=node.getAttributeNS(NAUHelper.XSI,"type");
        if (!NAUHelper.isEmpty(typeAttr))
        {
            String[] splitString=typeAttr.split(":");
            if (splitString.length==2)
            {
                String namespace=node.lookupNamespaceURI( splitString[0]);
                if (namespace.equals("http://www.w3.org/2001/XMLSchema"))
                {
                    String value=splitString[1];
                    if( value.equals("byte"))
                    {
                        return Byte.valueOf(node.getTextContent());
                    }
                    if( value.equals("unsignedByte"))
                    {
                        return Integer.valueOf(node.getTextContent());
                    }
                    if( value.equals("positiveInteger"))
                    {
                        return Integer.valueOf(node.getTextContent());
                    }
                    if( value.equals( "double"))
                    {
                        return Double.valueOf(node.getTextContent());
                    }
                    if( value.equals("float"))
                    {
                        return Float.valueOf(node.getTextContent());
                    }
                    if( value.equals("long"))
                    {
                        return Long.valueOf(node.getTextContent());
                    }
                    if( value.equals("unsignedLong"))
                    {
                        return Long.valueOf(node.getTextContent());
                    }
                    if( value.equals("int") || value.equals("integer") || value.equals("negativeInteger") || value.equals("nonNegativeInteger"))
                    {
                        return Integer.valueOf(node.getTextContent());
                    }
                    if( value.equals("unsignedInt"))
                    {
                        return Long.valueOf(node.getTextContent());
                    }
                    if( value.equals("decimal"))
                    {
                        return new java.math.BigDecimal(node.getTextContent());
                    }
                    if( value.equals("short"))
                    {
                        return Short.valueOf(node.getTextContent());
                    }
                    if( value.equals("unsignedShort"))
                    {
                        return Integer.valueOf(node.getTextContent());
                    }
                    else if (value.equals("bool"))
                    {
                        return node.getTextContent().equalsIgnoreCase("true");
                    }
                    else
                    {
                        return  node.getTextContent();
                    }
                }
                else
                {
                    String typeName=typeAttr;
                    if(splitString.length==2)
                    {
                        typeName= splitString[1];
                    }
                    if (namespace != null)
                    {
                        String classType=namespace+"^^" + typeName;
                        java.lang.Class temp=classNames.get(classType);
                        if (temp != null)
                        {
                            Object obj = createInstance(node, temp);
                            return obj;
                        }
                    }
                }
            }
        }
        return node;
    }
    
    private String ensureNamespace(String namespace,org.w3c.dom.Document doc,String defaultPrefix)
    {
        String prefix="";
        if(!NAUHelper.isEmpty(namespace))
        {
            if(namespaces.containsKey(namespace))
            {
                prefix=namespaces.get(namespace);
            }
            else
            {
                prefix=defaultPrefix!=null?defaultPrefix:"ns"+namespaces.size();
                namespaces.put(namespace,prefix);
                doc.getDocumentElement().setAttribute("xmlns:"+prefix,namespace);
            }
        }
        return prefix;
    }

    public org.w3c.dom.Element writeElement(String namespace, String name, org.w3c.dom.Document doc)
    {
        String prefix=ensureNamespace(namespace,doc,null);
        org.w3c.dom.Element element= doc.createElementNS(namespace,name);
        if(!NAUHelper.isEmpty(prefix))
        {
            element.setPrefix(prefix);
        }
        return element;
    }

    public org.w3c.dom.Element writeElementWithType(Object obj, Class type, String name,String namespace, org.w3c.dom.Element parent, boolean skipNullProperty)
    {
        if (obj == null && skipNullProperty)
        {
            return null;
        }
        org.w3c.dom.Element propertyElement=writeElement(namespace,name,parent.getOwnerDocument());
        parent.appendChild(propertyElement);

        if (obj==null)
        {
            propertyElement.setAttributeNS(NAUHelper.XSI,"xsi:nil","true");
            return null;
        }

        if  (obj instanceof NAUIReferenceObject)
        {
            String idStr=reverseReferencesTable.get(obj);
            if (idStr != null)
            {
                propertyElement.setAttributeNS(NAUHelper.MS_SERIALIZATION_NS,"ms:Ref",idStr);
                return null;
            }

            idStr="i"+ (reverseReferencesTable.size() + 1);
            propertyElement.setAttributeNS(NAUHelper.MS_SERIALIZATION_NS,"ms:Id",idStr);
            reverseReferencesTable.put(obj,idStr);
        }

        java.lang.Class currentType=obj.getClass();
        if (currentType != type)
        {
            String xmlType=reverseClassNames.get(currentType);
            if (xmlType != null)
            {
                String[] splitType = xmlType.split("\\^\\^");
                String fullname=getXmlFullName(propertyElement, splitType[0],splitType[1]);
                propertyElement.setAttributeNS(NAUHelper.XSI,"xsi:type",fullname);
            }
        }

        return propertyElement;
    }

    public org.w3c.dom.Document setResponse(NAUResponseData response) throws java.lang.Exception 
    {
        if(NAUHelper.isEmpty(response.getBody()))
        {
            throw new java.lang.Exception("No body content");
        }
        org.w3c.dom.Document parsedXml = NAUHelper.loadXMLFromString(response.getBody());

        if(parsedXml.getDocumentElement()==null)
        {
            throw new java.lang.Exception(response.getBody());
        }

        outputBody= NAUHelper.getElement(parsedXml.getDocumentElement(),soapNS,"Body");
        outputHeader=NAUHelper.getElement(parsedXml.getDocumentElement(),soapNS,"Header");

        if(outputBody==null)
        {
            throw new java.lang.Exception(response.getBody());
        }

        org.w3c.dom.Element fault=NAUHelper.getElement(outputBody, soapNS,"Fault");
        if (fault != null)
        {
            org.w3c.dom.Element faultString=NAUHelper.getNodeByLocalName(fault, "faultstring",0);
            if (faultString == null)
            {
                org.w3c.dom.Element reasonNode=NAUHelper.getNodeByLocalName(fault, "Reason",0);
                if( reasonNode != null)
                {
                    faultString=NAUHelper.getNodeByLocalName(reasonNode, "Text",0);
                }
            }

            org.w3c.dom.Element faultDetail=NAUHelper.getNodeByLocalName( fault, "detail",0);
            if (faultDetail == null)
            {
                faultDetail=NAUHelper.getNodeByLocalName(fault, "Detail",0);
            }

            if (faultDetail != null)
            {
                org.w3c.dom.Element faultClass=NAUHelper.getFirstChildElement(faultDetail);
                if (faultClass != null)
                {
                    String typeName=faultClass.getLocalName();
                    String namespaceNode=parsedXml.lookupNamespaceURI(typeName);
                    String namespace;
                    if(namespaceNode==null)
                    {
                        namespace=faultClass.getNamespaceURI();
                    }
                    else
                    {
                        namespace=namespaceNode;
                    }
                    String classType=namespace+"^^"+typeName;
                    String tempKey=elementNames.get(classType);
                    if (tempKey != null)
                    {
                        classType=tempKey;
                    }
                    java.lang.Class temp=classNames.get(classType);
                    if (temp != null)
                    {
                        Object faultObj=createInstance(faultClass, temp);
                        java.lang.Exception faultException;
                        if(!(faultObj instanceof java.lang.Exception))
                        {
                            faultException = new NAUSoapException(faultObj);
                        }
                        else
                        {
                            faultException=(java.lang.Exception) faultObj; 
                        }
                        throw faultException;
                    }
                }
            }
            throw new NAUSoapException(faultString.getTextContent(),faultDetail);
        }

        return parsedXml;
    }

    public Object createObject(org.w3c.dom.Element node, java.lang.Class type)
    {
        if(node==null)
        {
            return null;
        }
        java.lang.Class objType=type;
        org.w3c.dom.Element element=node;

        String refAttr=node.getAttributeNS(NAUHelper.MS_SERIALIZATION_NS,"Ref");
        if (!NAUHelper.isEmpty(refAttr))
        {
            return referencesTable.get(refAttr);
        }

        String nilAttr=node.getAttributeNS(NAUHelper.XSI,"nil");
        if (nilAttr != null && NAUHelper.toBoolFromString( nilAttr))
        {
            return null;
        }

        String typeAttr=node.getAttributeNS(NAUHelper.XSI,"type");
        if (!NAUHelper.isEmpty(typeAttr))
        {
            String[] splitString=typeAttr.split(":");
            String namespace = null;
            if(splitString.length==2)
            {
                namespace=node.lookupNamespaceURI(splitString[0]);
            }
            if(namespace==null)
            {
                namespace="";
            }
            String typeName=typeAttr;
            if(splitString.length == 2)
            {
                typeName=splitString[1];
            }
            String classType=namespace+"^^"+typeName;
            if(classNames.containsKey(classType))
            {
                objType=classNames.get(classType);
            }
        }

        String hrefAttr = node.getAttribute("href");
        if (NAUHelper.isEmpty(hrefAttr))
        {
            hrefAttr = node.getAttribute("ref");
        }

        if (!NAUHelper.isEmpty(hrefAttr))
        {
            String hrefId=hrefAttr.substring(1);
            org.w3c.dom.Element tempNode=node.getOwnerDocument().getElementById(hrefId);

            if (tempNode!=null)
            {
                element=tempNode;
            }
        }
        
        if(objType!=null)
        {
            Object obj=createInstance(element,objType);
            return obj;
        }
        return null;
    }
    
    private Object createInstance(org.w3c.dom.Element node, java.lang.Class objType)
    {
        try
        {
            NAUISerializableObject obj = (NAUISerializableObject)objType.newInstance();
            String idAttr=node.getAttributeNS(NAUHelper.MS_SERIALIZATION_NS,"Id");
            if (!NAUHelper.isEmpty(idAttr))
            {
                referencesTable.put(idAttr,obj);
            }
            obj.loadWithXml(node,this);
            return obj;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    private String getXmlFullName(org.w3c.dom.Element element,String uri, String name)
    {
        String prefix=ensureNamespace(uri,element.getOwnerDocument(),null);
        String fullname=name;
        if (!NAUHelper.isEmpty(prefix))
        {
            fullname=prefix+":"+name;
        }
        return fullname;
    }

    public boolean hasAttribute(org.w3c.dom.Element node,String namespace,String name)
    {
        String ns=namespace;
        if(NAUHelper.isEmpty(namespace))
        {
            ns=null;
        }
        return node.hasAttributeNS(ns,name);
    }

    public org.w3c.dom.Attr getAttribute(org.w3c.dom.Element node,String namespace,String name)
    {
        String ns=namespace;
        if(NAUHelper.isEmpty(namespace))
        {
            ns=null;
        }
        return node.getAttributeNodeNS(ns,name);
    }
}